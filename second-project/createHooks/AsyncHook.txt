import { useCallback, useEffect, useState } from 'react';

const useAsync = (func, sholdRun) => {
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [status, setStatus] = useState('idle'); //idle = nada;

  /*useCallback para não re-renderizas função, armazenando-a em memória durante execução*/
  const run = useCallback(() => {
    setResult(null);
    setError(null);
    setStatus('pending');

    return (
      func()
        //se tudo ocorrer bem, ela pega o JSON retornado de "fethDate"
        .then((response) => {
          setResult(response);
          setStatus('settled');
        })
        .catch((error) => {
          setError(error);
          setStatus('error');
        })
    );
  }, [func]);

  useEffect(() => {
    if (sholdRun) {
      run();
    }
  }, [run, sholdRun]);

  return [run, result, error, status];
};

const fetchDate = async () => {
  const data = await fetch('https://jsonplaceholder.typicode.com/posts/');
  const inJson = await data.json();

  return inJson;
};

export default function App() {
  const [posts, setPosts] = useState(null);
  const [refet, result, error, status] = useAsync(fetchDate, true);

  useEffect(() => {
    refet();
  }, [refet]);

  return <pre>{JSON.stringify(result, null, 2)}</pre>;
}
